{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAEaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAENC,mBAAS,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAgB1C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACMJ,EAAWK,OAAOC,OAAS,IACnCR,GAAa,SAACS,GAAD,OAAaP,GAAb,mBAA4BO,OACzCN,EAAc,MAKd,SAEI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAlBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,8DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCGPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,kCAAMA,EAAN,WCHEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA0BtC,OAlBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAKZ,CAACpB,IAEGqB,EDrByBM,CAAc3B,GAAjCa,EAHwB,EAG7BN,KAAYa,EAHiB,EAGjBA,QAUpB,OACI,qCACI,qBAAIJ,UAAU,mCAAd,cAAmDhB,EAAnD,OAGA,sBAAKgB,UAAU,YAAf,UAEMI,GAAW,mBAAGJ,UAAU,kCAAb,qBAITH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAIQA,GAFCA,EAAIC,cEoBtBiB,EA9CO,WAAO,IAAD,EAMM1C,mBAAS,CAAC,aANhB,mBAMnBc,EANmB,KAMTf,EANS,KAaxB,OACE,qCACI,8CACA,uBAEH,cAAC,EAAD,CAAaA,YAAcA,IACxB,6BAIIe,EAASS,KAAK,SAAET,GAAF,OACd,cAAC,EAAD,CAEAA,SAAWA,GADLA,YCzBpB6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.01a0f4fc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategory}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n           if ( inputValue.trim().length > 2 ) {\r\n        setCategory( (cats) => [  inputValue, ...cats] );\r\n        setInputValue('');\r\n           }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            \r\n            <input \r\n            type=\"Text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGift = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=jjKYHYK67iHKFzyQqlMI1eQMnDI6nunI`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n\r\n\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={ title } />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\n import { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n \r\n    const { data:images,loading } = useFetchGifs( category );\r\n\r\n    \r\n\r\n    // useEffect(() => {\r\n    //     getGift( category )\r\n    //     .then(setImages)\r\n    // }, [ category ])\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animate animate__fadeIn\"> {category} </h3>\r\n\r\n            \r\n            <div className=\"card-grid\">\r\n\r\n                { loading && <p className=\"animate__animate animate__flash\">loading</p> }\r\n\r\n\r\n                {\r\n                    images.map( img => (\r\n\r\n                        <GifGridItem\r\n\r\n                            key={img.id}\r\n\r\n                            {...img}\r\n\r\n                        />\r\n                    ))\r\n\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGift } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getGift(category)\r\n            .then(imgs => {\r\n\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                }, 3000)\r\n\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\n\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n const GifExpertApp = () => {\r\n\r\n \r\n\r\n \r\n\r\n  const [category, setCategory] = useState(['devilman']);\r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n    return (\r\n      <>\r\n          <h2 >GifExpertApp</h2>\r\n          <hr />  \r\n          \r\n       <AddCategory setCategory={ setCategory }/>\r\n          <ol>\r\n            \r\n            \r\n            {\r\n              category.map( ( category ) => (\r\n              <GifGrid\r\n              key={ category }\r\n              category={ category } \r\n              />  \r\n              ))\r\n            }\r\n         \r\n       \r\n          </ol> \r\n         \r\n            \r\n        \r\n\r\n        </>\r\n    \r\n\r\n    )\r\n  \r\n    \r\n        \r\n\r\n      };\r\nexport default GifExpertApp\r\n      ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}